class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        int l =0;
        int r =k;
        int c=0;
        long maxsum =0;
        long sum = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<k;i++){
            sum=sum+nums[i];
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        if(map.size()==k){
            maxsum=sum;
        }
        while(r<nums.length){
            
            sum=sum+nums[r]-nums[l];
            int y = map.get(nums[l]);
            if(y-1==0){
                map.remove(nums[l]);
            }else{
                map.put(nums[l],map.get(nums[l])-1);
            }
            map.put(nums[r],map.getOrDefault(nums[r],0)+1);
            if(map.size()==k){
                maxsum = Math.max(maxsum,sum);
            }
            l++;
            r++;
        }
        return maxsum;
    }
}
